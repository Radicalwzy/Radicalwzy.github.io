<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://radicalwzy.github.io/</id>
    <title>Radicalwzy</title>
    <updated>2019-11-11T07:42:49.820Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://radicalwzy.github.io/"/>
    <link rel="self" href="https://radicalwzy.github.io//atom.xml"/>
    <subtitle>欢迎来到我的博客</subtitle>
    <logo>https://radicalwzy.github.io//images/avatar.png</logo>
    <icon>https://radicalwzy.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Radicalwzy</rights>
    <entry>
        <title type="html"><![CDATA[JS中的prototype、__proto__与constructor]]></title>
        <id>https://radicalwzy.github.io//post/js-zhong-de-prototype__proto__-yu-constructor</id>
        <link href="https://radicalwzy.github.io//post/js-zhong-de-prototype__proto__-yu-constructor">
        </link>
        <updated>2019-11-11T06:22:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="js中的prototype-__proto__与constructor">JS中的prototype、<code>__proto__</code>与constructor</h1>
<p>​    要了解prototype、<code>__proto__</code>与constructor，首先要了解<u>对象</u>和<u>函数</u>是什么。</p>
<p><u><em><strong>对象</strong></em></u></p>
<ol>
<li>
<p>“JavaScript” 对象是变量的容器，但是通常我们认为对象是<strong>键值对</strong>的容器，键值对的通常写法是 name:value（键与值由冒号分割）。</p>
</li>
<li>
<p>键值对在 javaScript 对象中通常称为<strong>对象属性</strong>。</p>
</li>
<li>
<p>例子</p>
</li>
</ol>
<pre><code class="language-xml">var peoson = {
	name:&quot;zhangsan&quot;,
	age:21,
	sayName:function(){
		return this.name;
    }
}
</code></pre>
<p><strong><u>函数</u></strong></p>
<ol start="4">
<li>
<p>函数是一段代码，需要通过名字来进行调用。它能将一些数据（函数的参数）传递进去进行处理，然后返回一些数据（函数的返回值），也可以不返回数据。</p>
</li>
<li>
<p>例子</p>
</li>
</ol>
<pre><code class="language-xml">function sum(num1,num2){
	return num1+num2;
}
</code></pre>
<p><u><strong>对象与函数的联系</strong></u></p>
<p>​       对象里面可以封装函数。</p>
<p><strong>对象与函数的区别</strong>：</p>
<p>​    1.对象里面包含的是而且只能是键值对（键值以“：”分割，值内容包括普通的变量和函数）。</p>
<p>​    2. 函数里面可以封装操作过程，但是对象里面无法封装操作过程。</p>
<p><strong>了解了对象与函数之后，我们先来做一个总结</strong></p>
<p>1.<code>__proto__</code>和<code>constructor</code>属性是<strong>对象</strong>所独有的 ； <code>prototype</code>属性是<strong>函数</strong>所独有的 ， 因为函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性</p>
<p>​		  2.<code>__proto__</code>属性的作用是：当你访问一个对象的属性，但是如果该对象内部属性并没有这个属性的话，那么就会去它的<code>__proto__</code>属性所指向的父对象中去找，如果父对象没有，那么继续在父对象的父对象中去找，一直找，直到<code>__proto__</code>属性终点null，如果再往上找，这时候会报错。这里引发了一个点，就是： 通过<code>__proto__</code>属性将对象连接起来的这条链路即我们所谓的<mark>原型链</mark>。</p>
<p>​		3.<code>prototype</code>属性的<strong>作用</strong>就是让该函数所实例化的对象们都可以找到公用的属性和方法 ， 即<code>f1.__proto__ === Foo.prototype</code></p>
<p>​		4.<code>constructor</code>属性的含义就是<strong>指向该对象的构造函数</strong>，所有函数（此时看成对象了）最终的构造函数都指向<strong>Function</strong>。</p>
<hr>
<p><strong>现在正式开始</strong>让我们从如下一个简单的例子展开讨论，并配以相关的图帮助理解：</p>
<pre><code class="language-xml">function Foo() {...};
let f1 = new Foo();
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/e6c21074-380a-4529-8f14-7de72a08bba9.png?/radicalwzy" alt=""></figure>
<p>看到这图别怕，让我们一步步剖析，彻底搞懂它们！</p>
<p><strong>图的说明</strong>：右下角为图例，红色箭头表示<code>__proto__</code>属性指向、绿色箭头表示<strong>prototype</strong>属性的指向、棕色实线箭头表示本身具有的<strong>constructor</strong>属性的指向，棕色虚线箭头表示继承而来的constructor属性的指向；蓝色方块表示对象，浅绿色方块表示函数（这里为了更好看清，Foo()仅代表是函数，并不是指执行函数Foo后得到的结果，图中的其他函数同理）。图的中间部分即为它们之间的联系，图的最左边即为例子代码。</p>
<p><strong>__ proto __ 属性</strong></p>
<p>​    首先，我们需要牢记两点：①<code>__proto__</code>和<strong>constructor</strong>属性是对象所独有的；② prototype属性是<strong>函数</strong>所独有的。但是由于JS中函数也是一种对象，所以函数也拥有<code>__proto__</code>和constructor属性，这点是致使我们产生困惑的很大原因之一。上图有点复杂，我们把它按照属性分别拆开，然后进行分析：</p>
<figure data-type="image" tabindex="2"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/c0f5658c-1b12-440b-9367-23518cdbf76a.png?/radicalwzy" alt=""></figure>
<p>​    第一，这里我们仅留下 <code>__proto__</code>属性，它是<strong>对象</strong>所独有的，可以看到<code>__proto__</code>属性都是由<strong>一个对象指向一个对象</strong>，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<code>__proto__</code>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找…直到原型链顶端null（可以理解为原始人。。。），再往上找就相当于在null上取值，会报错（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此结束，null为原型链的终点），由以上这种通过<code>__proto__</code>属性来连接对象直到<strong>null</strong>的一条链即为我们所谓的<strong>原型链</strong>。</p>
<p><strong>constructor属性</strong></p>
<p>最后，我们来看一下 <strong><code>constructor</code></strong> 属性：</p>
<figure data-type="image" tabindex="3"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/c9b65d5d-7eda-4d7b-b40c-19297c5c3058.png?/radicalwzy" alt=""></figure>
<p>​		<strong>constructor</strong>属性也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数（本身拥有或继承而来，继承而来的要结合__proto__属性查看会更清楚点，如下图所示），从上图中可以看出Function这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由Function构造函数得来，所以constructor属性的终点就是Function这个函数。</p>
<figure data-type="image" tabindex="4"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/06cb4702-0714-45d0-9889-4857d1fd1669.png?/radicalwzy" alt=""></figure>
<p>​		这里解释一下上段中“每个对象都有构造函数”这句话。这里的意思是每个对象都可以找到其对应的constructor，因为创建对象的前提是需要有constructor，而这个constructor可能是对象自己本身显式定义的或者通过__proto__在原型链中找到的。而单从constructor这个属性来讲，只有prototype对象才有。每个函数在创建的时候，JS会同时创建一个该函数对应的prototype对象，而函数创建的对象.<strong>proto</strong> === 该函数.prototype，该函数.prototype.constructor===该函数本身，故通过函数创建的对象即使自己没有constructor属性，它也能通过__proto__找到对应的constructor，所以任何对象最终都可以找到其构造函数（null如果当成对象的话，将null除外）。如下：</p>
<figure data-type="image" tabindex="5"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/1c163160-66e8-4af8-9afd-6c1d56e5d83b.png?/radicalwzy" alt=""></figure>
<p>原文链接：https://blog.csdn.net/cc18868876837/article/details/81211729</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git和github]]></title>
        <id>https://radicalwzy.github.io//post/git-he-github</id>
        <link href="https://radicalwzy.github.io//post/git-he-github">
        </link>
        <updated>2019-10-04T03:44:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git">git</h1>
<h2 id="git介绍">git介绍</h2>
<p>​        git是开源的(世界上最先进)分布式版本控制系统，它可以高效高速地处理项目版本管理。 分布式相比集中式的最大区别是Git没有“中央服务器”，  每位开发者都可以通过克隆（git clone）远程库，在本地机器上存储一个完整的Git仓库，还可以把代码的修改提交到本地库。</p>
<h3 id="工作区和暂存区">工作区和暂存区</h3>
<p>工作区（Working Directory）</p>
<p>​		就是你在电脑里能看到的目录。</p>
<p>暂存区（ Staging Area ）</p>
<p>​		 英文叫stage, 或index。一般存放在 &quot;.git目录下&quot; 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</p>
<p>版本库（Repository）</p>
<p>​		工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<figure data-type="image" tabindex="1"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/913b2cb6-8827-4a88-b899-828906f8d38d.jpg?x-oss-process=style/radicalwzy" alt=""></figure>
<h3 id="git安装">git安装</h3>
<p>1.在linux下安装</p>
<pre><code class="language-xml">下载v2.21.0版本

wget https://github.com/git/git/archive/v2.21.0.tar.gz

安装依赖

yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker

解压

tar -zxvf v2.21.0.tar.gz

安装Git在/usr/local/git路径

make prefix=/usr/local/git all

make prefix=/usr/local/git install

配置环境变量

vim /etc/profile

export PATH=/usr/local/git/bin:$PATH

export PATH=$PATH:$GIT_HOME/bin
</code></pre>
<p>2.在windows下安装</p>
<p>​		在Windows上使用Git，可以从Git官网直接下载安装程序，默认选项安装即可。</p>
<h3 id="git版本控制">git版本控制</h3>
<p>​    什么是“版本控制”？  版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 比如你进行了N次提交，就有了N个版本，我们可以通过一系列命令穿梭版本。</p>
<p>​    git是分布式版本控制系统，git客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p>
<figure data-type="image" tabindex="2"><img src="https://radicalwzy.oss-cn-beijing.aliyuncs.com/image/2019-11-08/b4496a56-8a4f-4ab5-bb02-e8f550148fc2.png" alt=""></figure>
<h2 id="git常用命令">git常用命令</h2>
<h3 id="git配置">git配置</h3>
<pre><code class="language-xml">设置邮箱、用户名：
git config --global （基本不用，给整个计算机一次性设置）
git config --system (给当前用户一次性设置)
git config --local (给当前项目一次性设置)

git config --local user.name 'wzy'
git config --local user.email '790395185@qq.com'

删除用户命令：
git  config --local --unset user.name
git  config --local --unset user.email
</code></pre>
<h3 id="创建版本库">创建版本库</h3>
<pre><code class="language-xml">$ git init
</code></pre>
<pre><code>	Git 使用 **git init** 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 **git init** 是使用 Git 的第一个命令。
</code></pre>
<p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变</p>
<h3 id="把文件添加到版本库">把文件添加到版本库</h3>
<pre><code class="language-xml">$ git add readme.md
</code></pre>
<p>​		提交readme.md从工作区到暂存区</p>
<pre><code class="language-xml">git commit -m 'a new file' readme.md
</code></pre>
<p>​		 将目录下readme.md文件提交到仓库中。简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<h3 id="仓库状态">仓库状态</h3>
<pre><code class="language-xml">git status
</code></pre>
<p>​		 <code>git status</code>命令可以让我们时刻掌握仓库当前的状态。但如果能看看具体修改了什么内容 可以使用</p>
<pre><code class="language-xml">git diff readme.md
</code></pre>
<h3 id="查看提交记录">查看提交记录</h3>
<pre><code class="language-xml">$ git log --pretty=oneline
8390d9be0d49ee031fc6bb02dbc0e9e4d7c98c48 (HEAD -&gt; master) change readme.md
4fef495a12f10803c1b1a7f2b6e2544529c2390e a new file


$ git log --oneline
8390d9b (HEAD -&gt; master) change readme.md
4fef495 a new file

使用一行显示
git log 可以查看具体提交的作者和时间
</code></pre>
<h3 id="版本回退">版本回退</h3>
<pre><code>	`git log`命令显示从最近到最远的提交日志。  你看到的一大串类似8390d9be0d49的是`commit id`（版本号）。 在 Git中，用`HEAD`表示当前版本，也就是最新的提交`commit id`，上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个^比较容易数不过来，所以写成`HEAD~100`。 
</code></pre>
<p>​		 现在我们要把当前版本回退到上一个版本</p>
<pre><code class="language-xml">$ git reset --hard HEAD^
HEAD is now at 4fef495 a new file
</code></pre>
<p>​		然我们用git log再看看现在版本库的状态，最新的那个版本已经看不到了</p>
<pre><code class="language-xml">$ git log --pretty=oneline
4fef495a12f10803c1b1a7f2b6e2544529c2390e (HEAD -&gt; master) a new file

</code></pre>
<p>​		如果你还想回去的话，如果上面的命令行窗口还没有被关掉，就可以顺着往上找，找到那个commit id 为8390d9be，版本号没必要写全，前几位就可以了，Git会自动去找。也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<pre><code class="language-xml">$ git reset --hard 8390d9be
HEAD is now at 8390d9b change readme.md

</code></pre>
<p>​		如果你回退到了某个版本，关掉了电脑，第二天后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？ git reflog记录了你每一次的命令</p>
<pre><code class="language-xml">$ git reflog
8390d9b (HEAD -&gt; master) HEAD@{0}: reset: moving to 8390d9be
4fef495 HEAD@{1}: reset: moving to HEAD^
8390d9b (HEAD -&gt; master) HEAD@{2}: commit: change readme.md
4fef495 HEAD@{3}: commit (initial): a new file

</code></pre>
<h3 id="修改与撤销">修改与撤销</h3>
<p>​		git checkout -- file可以丢弃工作区的修改</p>
<pre><code class="language-xml">命令git checkout -- readme.md意思是，把readme.md文件在工作区的修改全部撤销，即让这个文件回到最近一次git commit或git add时的状态。
</code></pre>
<h3 id="删除文件">删除文件</h3>
<pre><code>	一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用`rm`命令删了
</code></pre>
<pre><code class="language-xml">$ git rm 文件名
$ git status:  删除已提交的文件(已经commit)删除之后，文件会被放到暂存区 
$ git commit -m '彻底删除'

</code></pre>
<pre><code class="language-xml">如果操作系统删除  rm 文件名(不带git)
$ rm 文件名
$ git status:  不在暂存区 直接到工作区。 
$ git add 
$ git commit   (彻底删除)
</code></pre>
<h3 id="git分支">git分支</h3>
<p>​		 几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>
<h4 id="创建与合并分支">创建与合并分支</h4>
<p>​		 在版本回退里，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p>
<p>​		 一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<figure data-type="image" tabindex="3"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/db346ff9-4553-479e-bfd9-e5df812dd21e.png?/radicalwzy" alt=""></figure>
<p>​		每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p>
<p>​		当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<figure data-type="image" tabindex="4"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/6ac5c221-6c3c-4e13-a46c-326512bf39ee.png?/radicalwzy" alt=""></figure>
<p>​		 对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>
<figure data-type="image" tabindex="5"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/de4fce59-90ea-4267-a421-487de0d4694c.png?/radicalwzy" alt=""></figure>
<p>​		 假如在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>
<figure data-type="image" tabindex="6"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/109186de-b3f4-458b-86f8-7724f4ec9a7a.png?/radicalwzy" alt=""></figure>
<p>​		 合并完分支后，可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>
<figure data-type="image" tabindex="7"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/be6fdf62-722e-4a08-88e7-fef98815bff6.png?/radicalwzy" alt=""></figure>
<p>​		创建并切换到dev分支：</p>
<pre><code class="language-xml">$ git checkout -b dev
Switched to a new branch 'dev'
</code></pre>
<p>​		对readme.md修改并提交：</p>
<pre><code class="language-xml">$ git add readme.md
$ git commit -m '4 changed'
</code></pre>
<p>​		切换回master分支</p>
<pre><code class="language-xml">$ git checkout master
Switched to branch 'master'
</code></pre>
<p>​		查看readme.md发现刚才修改的并没有出来。因为刚才提交到dev分支上了，master分支提交点没有变</p>
<figure data-type="image" tabindex="8"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/32cf0bfd-8c68-4f1f-8fd9-9f45720e6cc7.png?/radicalwzy" alt=""></figure>
<p>​		合并dev分支到master：</p>
<pre><code class="language-xml">$ git merge dev
</code></pre>
<p>​		合并后查看readme.md的内容，发现和dev分支的最新提交一样。</p>
<pre><code class="language-xml">$ git merge dev
Updating f6ae12d..91abbc1
Fast-forward
 readme.md | 1 +
 1 file changed, 1 insertion(+)
</code></pre>
<p>​		合并后dev分支没有用了，就可以删除dev分支</p>
<pre><code class="language-xml">$ git branch -d dev
Deleted branch dev (was 91abbc1).
</code></pre>
<p>​		查看分支信息的话，使用git branch</p>
<pre><code class="language-xml">$git branch
*即当前所在分支
</code></pre>
<h4 id="冲突问题">冲突问题</h4>
<p>​		在实际的开发过程中，如果不同分支修改了同一文件的同一行内容，合并的时候就会造成冲突。比如我们创建了dev的分支，将a.txt文件修改并提交。而master分支上也对a.txt进行了修改，并且某一行都存在修改。那么在合并的时候就会出现冲突</p>
<pre><code class="language-xml">$ git merge dev
Auto-merging readme.md
CONFLICT (content): Merge conflict in readme.md
Automatic merge failed; fix conflicts and then commit the result.

</code></pre>
<p>​		这时候就需要查看readme.md文件，手动修改解决冲突</p>
<pre><code class="language-xml">abc
cba
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
cccddd
=======
dddccc
&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev
ddd(dev)
~
~
~

</code></pre>
<p>​		然后再提交：</p>
<pre><code class="language-xml">$ git add readme.md
$ git commit -m 'after confict'
</code></pre>
<p>​		进行合并：</p>
<pre><code class="language-xml">$ git merge dev
Already up to date.
</code></pre>
<h4 id="多人协作">多人协作</h4>
<p>​		 当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>
<p>查看远程库的信息：</p>
<pre><code class="language-xml">$ git remote
origin
</code></pre>
<p>查看远程仓库详细信息：</p>
<pre><code class="language-xml">$ git remote -v
origin  https://github.com/Radicalwzy/customer_app.git (fetch)   (抓取)
origin  https://github.com/Radicalwzy/customer_app.git (push)    (推送)

</code></pre>
<p>推送分支</p>
<p>​		把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<pre><code>$ git push origin master
</code></pre>
<p>如果要推送其他分支，比如dev：</p>
<pre><code>$ git push origin dev
</code></pre>
<h1 id="github">github</h1>
<h2 id="github介绍">github介绍</h2>
<pre><code>	GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。 由于github的开源精神，如果要进行私有项目的托管，需要支付费用。
</code></pre>
<h2 id="github使用">github使用</h2>
<p>1.注册</p>
<p>2.创建仓库</p>
<figure data-type="image" tabindex="9"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/67299db9-b3fc-4983-8d4d-bbbb180dca69.png?/radicalwzy" alt=""></figure>
<p>根据提示可以进行远程仓库与本地仓库的绑定</p>
<figure data-type="image" tabindex="10"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/26662414-5ec7-4ce9-86ca-6556d404a791.png?/radicalwzy" alt=""></figure>
<ol start="3">
<li></li>
</ol>
<pre><code class="language-xml">wzy@DESKTOP-TVGID1C MINGW64 ~/Desktop/新建文件夹
$ git init
Initialized empty Git repository in C:/Users/79039/Desktop/新建文件夹/.git/

wzy@DESKTOP-TVGID1C MINGW64 ~/Desktop/新建文件夹 (master)
$ git add a.md

wzy@DESKTOP-TVGID1C MINGW64 ~/Desktop/新建文件夹 (master)
$ git commit -m 'first commit'
[master (root-commit) e696316] first commit
1 file changed, 4 insertions(+)
create mode 100644 a.md

wzy@DESKTOP-TVGID1C MINGW64 ~/Desktop/新建文件夹 (master)
$ git remote add origin https://github.com/Radicalwzy/github-use.git

wzy@DESKTOP-TVGID1C MINGW64 ~/Desktop/新建文件夹 (master)
$ git push origin master
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 226 bytes | 226.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)

</code></pre>
<p>​		这里有个坑要注意一下：如果在创建远程仓库的时候勾选了 Initialize this repository with a README（创建仓库的时候自动创建一个readme.md文件），你push的时候会报错： failed to push some refs to https://github.com/Radicalwzy/github-use.git</p>
<p>​	  这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并一下：</p>
<pre><code class="language-xml">$ git pull --rebase origin master
$ git push origin master
这时候push就可以成功了
</code></pre>
<p>总结： 其实只需要进行下面几步就能把本地项目上传到Github</p>
<pre><code>-  在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库
-  把项目复制到这个文件夹里面，再通过git add .把项目添加到仓库 
-  再通过git commit -m &quot;注释内容&quot;把项目提交到仓库 
-  在Github上设置好SSH密钥后（看下面），新建一个远程仓库，通过git remote add origin https://github.com/Radicalwzy/github-use.git将本地仓库和远程仓库进行关联 
-  最后通过git push -u origin master把本地仓库的项目推送到Github上，（若新建远程仓库的时候自动创建了README文件报错，使用命令git pull --rebase origin master后再push） 
</code></pre>
<h2 id="ssh的配置">ssh的配置</h2>
<p>一、设置github的user name 和 email （上面说过）</p>
<p>二、检查是否存在ssh key</p>
<p>​		查看用户当前目录.ssh目录是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key</p>
<figure data-type="image" tabindex="11"><img src="https://radicalwzy.oss-accelerate.aliyuncs.com/image/2019-11-11/23ddbaa6-caf4-4af2-b532-bdfa69d3ebae.png?/radicalwzy" alt=""></figure>
<p>如果没有 需要生成一下</p>
<pre><code class="language-xml">ssh-keygen -t rsa -C &quot;790395185@qq.com&quot;
cat id_rsa.pub
//拷贝秘钥 ssh-rsa开头
</code></pre>
<p>三、github中添加SSH key</p>
<p>​		右上角头角点击Settings，左侧有个SSH and GPG keys ，然后点击</p>
<p>New SSH key  取名后将拷贝的秘钥复制进去添加。</p>
<p>四、验证是否成功配置</p>
<pre><code class="language-xml">$ ssh -T git@github.com
Hi Radicalwzy! You've successfully authenticated, but GitHub does not provide shell access.

</code></pre>
]]></content>
    </entry>
</feed>